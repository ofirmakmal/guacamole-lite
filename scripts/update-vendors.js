const https = require('https');
const fs = require('fs');
const path = require('path');

// --- Configuration ---
const VENDOR_FILES = [
    {
        url: 'https://raw.githubusercontent.com/apache/guacamole-client/main/guacamole-common-js/src/main/webapp/modules/Parser.js',
        dest: path.join(__dirname, '..', 'lib', 'vendor', 'GuacamoleParser.js'),
        header: `/*
 * VENDORED-IN-SOURCE
 *
 * This file is managed by the 'npm run update-vendors' script.
 * It is a copy of the original file with a 'module.exports' line appended
 * to make it compatible with Node.js's CommonJS module system.
 *
 * DO NOT EDIT THIS FILE DIRECTLY.
 *
 * To update, run the script, which will fetch the latest version from the source.
 *
 * =======================================================================
 *
 * Source: https://github.com/apache/guacamole-client/blob/main/guacamole-common-js/src/main/webapp/modules/Parser.js
 *
 */

`,
        // Line to append to make it a CommonJS module
        footer: '\n\nmodule.exports = Guacamole.Parser;\n'
    }
    // { url: '...', dest: '...', header: '...', footer: '...' }, // Add other files here
];

// --- Script Logic ---

/**
 * Downloads a file, prepends a header, appends a footer, and saves it.
 * @param {string} url The URL to download.
 * @param {string} dest The destination file path.
 * @param {string} header The header to prepend.
 * @param {string} footer The footer to append.
 * @returns {Promise<void>}
 */
function downloadAndModifyFile(url, dest, header, footer) {
    return new Promise((resolve, reject) => {
        https.get(url, (response) => {
            if (response.statusCode !== 200) {
                return reject(new Error(`Failed to get '${url}' (Status Code: ${response.statusCode})`));
            }

            let body = '';
            response.on('data', (chunk) => body += chunk);
            response.on('end', () => {
                // Ensure destination directory exists
                fs.mkdirSync(path.dirname(dest), { recursive: true });

                // Combine header, body, and footer
                const finalContent = header + body + footer;

                // Write the modified content to the file
                fs.writeFile(dest, finalContent, 'utf8', (err) => {
                    if (err) {
                        return reject(err);
                    }
                    console.log(`‚úÖ Successfully downloaded and saved to ${path.relative(process.cwd(), dest)}`);
                    resolve();
                });
            });
        }).on('error', (err) => {
            reject(err);
        });
    });
}

async function main() {
    console.log('üöÄ Starting vendor file update...');
    try {
        const downloadPromises = VENDOR_FILES.map(file =>
            downloadAndModifyFile(file.url, file.dest, file.header, file.footer)
        );
        await Promise.all(downloadPromises);
        console.log('‚ú® All vendor files updated successfully!');
    } catch (error) {
        console.error('\n‚ùå Error updating vendor files:');
        console.error(error.message);
        process.exit(1);
    }
}

main();
